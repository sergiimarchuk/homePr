import psycopg2
import datetime
from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)

# Connect to the PostgreSQL database
def get_db_connection():
    conn = psycopg2.connect(
        host="localhost",
        port="5435",
        database="postgres",
        user="postgres",
        password="123456"
    )
    return conn

# Root route
@app.route('/')
def index():
    return redirect(url_for('list_data'))

# Route for listing data
@app.route('/list')
def list_data():
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # Query the database tables
        cur.execute("SELECT * FROM my_schema.table_count_data")
        count_data = cur.fetchall()
        cur.execute("SELECT * FROM my_schema.table_picture_counter_data")
        picture_data = cur.fetchall()

        cur.close()
        conn.close()

        return render_template('list.html', count_data=count_data, picture_data=picture_data)
    except Exception as e:
        return str(e), 500

# Route to add count data
@app.route('/add_count_data', methods=['POST'])
def add_count_data():
    counter_data = request.form['counter_data']
    date = request.form['date']
    description = request.form['description']
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("INSERT INTO my_schema.table_count_data (counter_data, date, description) VALUES (%s, %s, %s)",
                    (counter_data, date, description))
        conn.commit()
        cur.close()
        conn.close()
        return redirect(url_for('list_data'))
    except Exception as e:
        return str(e), 500

# Route to add picture data
@app.route('/add_picture_data', methods=['POST'])
def add_picture_data():
    name_of_picture = request.form['name_of_picture']
    date = request.form['date']
    refer_mongo_entry = request.form['refer_mongo_entry']
    additional_info = request.form['additional_info']
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO my_schema.table_picture_counter_data (name_of_picture, id_count_data, refer_mongo_entry, additional_info)
            VALUES (%s, (SELECT id_count_data FROM my_schema.table_count_data WHERE date = %s), %s, %s)
            """,
            (name_of_picture, date, refer_mongo_entry, additional_info))
        conn.commit()
        cur.close()
        conn.close()
        return redirect(url_for('list_data'))
    except Exception as e:
        return str(e), 500

# Route to delete count data
@app.route('/delete_count_data/<int:id>', methods=['POST'])
def delete_count_data(id):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM my_schema.table_count_data WHERE id_count_data = %s", (id,))
        conn.commit()
        cur.close()
        conn.close()
        return redirect(url_for('list_data'))
    except Exception as e:
        return str(e), 500

# Route to delete picture data
"""@app.route('/delete_picture_data/<int:id>', methods=['POST'])
def delete_picture_data(id):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM my_schema.table_picture_counter_data WHERE id = %s", (id,))
        conn.commit()
        cur.close()
        conn.close()
        return redirect(url_for('list_data'))
    except Exception as e:
        return str(e), 500
"""
# Route to delete picture data
@app.route('/delete_picture_data/<int:id>', methods=['POST'])
def delete_picture_data(id):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM my_schema.table_picture_counter_data WHERE id_picture = %s", (id,))
        conn.commit()
        cur.close()
        conn.close()
        return redirect(url_for('list_data'))
    except Exception as e:
        return str(e), 500


# Route to edit count data
@app.route('/edit_count_data/<int:id>', methods=['GET', 'POST'])
def edit_count_data(id):
    if request.method == 'POST':
        counter_data = request.form['counter_data']
        date = request.form['date']
        description = request.form['description']
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                UPDATE my_schema.table_count_data
                SET counter_data = %s, date = %s, description = %s
                WHERE id_count_data = %s
                """, (counter_data, date, description, id))
            conn.commit()
            cur.close()
            conn.close()
            return redirect(url_for('list_data'))
        except Exception as e:
            return str(e), 500
    else:
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT * FROM my_schema.table_count_data WHERE id_count_data = %s", (id,))
            data = cur.fetchone()
            cur.close()
            conn.close()
            return render_template('edit_count.html', data=data)
        except Exception as e:
            return str(e), 500

# Route to edit picture data
@app.route('/edit_picture_data/<int:id>', methods=['GET', 'POST'])
def edit_picture_data(id):
    if request.method == 'POST':
        name_of_picture = request.form['name_of_picture']
        date = request.form['date']
        refer_mongo_entry = request.form['refer_mongo_entry']
        additional_info = request.form['additional_info']
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                UPDATE my_schema.table_picture_counter_data
                SET name_of_picture = %s, id_count_data = (SELECT id_count_data FROM my_schema.table_count_data WHERE date = %s),
                refer_mongo_entry = %s, additional_info = %s
                WHERE id = %s
                """, (name_of_picture, date, refer_mongo_entry, additional_info, id))
            conn.commit()
            cur.close()
            conn.close()
            return redirect(url_for('list_data'))
        except Exception as e:
            return str(e), 500
    else:
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT * FROM my_schema.table_picture_counter_data WHERE id = %s", (id,))
            data = cur.fetchone()
            cur.close()
            conn.close()
            return render_template('edit_picture.html', data=data)
        except Exception as e:
            return str(e), 500

# Route to add data
@app.route('/add_data', methods=['GET', 'POST'])
def add_data():
    if request.method == 'POST':
        counter_data = request.form['counter_data']
        date_input = request.form['date']
        description = request.form['description']
        name_of_picture = request.form['name_of_picture']
        refer_mongo_entry = request.form['refer_mongo_entry']
        additional_info = request.form['additional_info']
        
        # Handle the empty date input by setting it to today's date
        if not date_input:
            date_input = datetime.date.today().strftime('%Y-%m-%d')
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            # Insert into table_count_data
            cur.execute("""
                INSERT INTO my_schema.table_count_data (counter_data, date, description)
                VALUES (%s, %s, %s)
                RETURNING id_count_data
                """, (counter_data, date_input, description))
            id_count_data = cur.fetchone()[0]
            
            # Insert into table_picture_counter_data
            cur.execute("""
                INSERT INTO my_schema.table_picture_counter_data (name_of_picture, id_count_data, refer_mongo_entry, additional_info)
                VALUES (%s, %s, %s, %s)
                """, (name_of_picture, id_count_data, refer_mongo_entry, additional_info))
            
            conn.commit()
            cur.close()
            conn.close()
            
            return redirect(url_for('list_data'))
        except Exception as e:
            return str(e), 500
    else:
        return render_template('add_data.html')

if __name__ == '__main__':
    app.run(debug=True)

